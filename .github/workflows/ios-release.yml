name: iOS Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-ios:
    name: Build iOS IPA
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      # Step 3: Enable Corepack for Yarn 4
      - name: Enable Corepack
        run: |
          corepack enable
          corepack prepare yarn@4.10.3 --activate

      # Step 4: Setup Expo and EAS
      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          packager: npm

      # Step 5: Install dependencies
      - name: Install dependencies
        run: yarn install --immutable

      # Step 6: Get version tag
      - name: Get version tag
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      # Step 7: Update package.json version (DISABLED - using manual version from package.json)
      # - name: Update package.json version
      #   run: |
      #     VERSION="${{ steps.version.outputs.tag }}"
      #     # Remove 'v' prefix if present (e.g., v1.0.0 -> 1.0.0)
      #     VERSION_NUMBER="${VERSION#v}"
      #     echo "Updating package.json version to $VERSION_NUMBER"
      #
      #     # Update package.json using Node.js
      #     node -e "
      #       const fs = require('fs');
      #       const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
      #       pkg.version = '$VERSION_NUMBER';
      #       fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
      #     "
      #
      #     echo "✅ package.json updated to version $VERSION_NUMBER"
      #     cat package.json | grep '"version"'

      # Step 8: Set APP_VERSION environment variable (DISABLED - using manual version from package.json)
      # - name: Export APP_VERSION for EAS Build
      #   run: |
      #     VERSION="${{ steps.version.outputs.tag }}"
      #     VERSION_NUMBER="${VERSION#v}"
      #     echo "APP_VERSION=$VERSION_NUMBER" >> $GITHUB_ENV
      #     echo "✅ APP_VERSION set to $VERSION_NUMBER"

      # Step 9: Build iOS IPA on EAS (without submit)
      - name: Build iOS IPA on EAS
        id: build_ios
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          echo "Building iOS IPA (version from package.json)..."
          eas build --platform ios --profile production --non-interactive --no-wait --json > ios_build.json
          BUILD_ID=$(cat ios_build.json | jq -r '.[0].id')
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "🍎 iOS Build ID: $BUILD_ID"
          echo "🔗 View iOS build: https://expo.dev/accounts/[your-account]/projects/cherry-studio/builds/$BUILD_ID"

      # Step 10: Wait for build to complete
      - name: Wait for iOS build to complete
        id: wait_build
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          BUILD_ID="${{ steps.build_ios.outputs.build_id }}"
          echo "⏳ Waiting for build $BUILD_ID to complete..."

          # Wait for build to complete (max 60 minutes)
          MAX_WAIT=3600
          ELAPSED=0
          INTERVAL=30

          while [ $ELAPSED -lt $MAX_WAIT ]; do
            STATUS=$(eas build:view $BUILD_ID --json | jq -r '.status')
            echo "Current status: $STATUS (elapsed: ${ELAPSED}s)"

            if [ "$STATUS" = "finished" ]; then
              echo "✅ Build completed successfully!"
              ARTIFACT_URL=$(eas build:view $BUILD_ID --json | jq -r '.artifacts.buildUrl')
              echo "artifact_url=$ARTIFACT_URL" >> $GITHUB_OUTPUT
              exit 0
            elif [ "$STATUS" = "errored" ] || [ "$STATUS" = "canceled" ]; then
              echo "❌ Build failed with status: $STATUS"
              exit 1
            fi

            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          echo "⏱️ Build timeout after ${MAX_WAIT}s"
          exit 1

      # Step 11: Download IPA from EAS
      - name: Download IPA
        id: download_ipa
        run: |
          ARTIFACT_URL="${{ steps.wait_build.outputs.artifact_url }}"
          echo "📥 Downloading IPA from: $ARTIFACT_URL"

          curl -L -o CherryStudio.ipa "$ARTIFACT_URL"

          # Verify download
          if [ -f "CherryStudio.ipa" ]; then
            FILE_SIZE=$(stat -f%z "CherryStudio.ipa" 2>/dev/null || stat -c%s "CherryStudio.ipa" 2>/dev/null)
            echo "✅ IPA downloaded successfully (size: $FILE_SIZE bytes)"
            echo "ipa_path=CherryStudio.ipa" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to download IPA"
            exit 1
          fi

      # Step 12: Create GitHub Release with IPA
      - name: Create or Update GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Cherry Studio ${{ steps.version.outputs.tag }}
          body: |
            ## Cherry Studio ${{ steps.version.outputs.tag }} - iOS

            ### 🍎 iOS
            - Built with EAS Build (production profile)
            - **Build ID**: `${{ steps.build_ios.outputs.build_id }}`
            - [View Build Details on Expo](https://expo.dev/accounts/[your-account]/projects/cherry-studio/builds/${{ steps.build_ios.outputs.build_id }})

            ### 📦 Installation
            1. Download the `CherryStudio.ipa` file below
            2. Install on your jailbroken device using your preferred method (e.g., Filza, AltStore, Sideloadly)

            ---

            🤖 Automatically generated by GitHub Actions
          draft: false
          prerelease: false
          files: |
            ${{ steps.download_ipa.outputs.ipa_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 13: Build Summary
      - name: Build Summary
        if: success()
        run: |
          echo "## Build Completed! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🍎 iOS" >> $GITHUB_STEP_SUMMARY
          echo "- **Build ID**: \`${{ steps.build_ios.outputs.build_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Build completed and IPA uploaded" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Details**: [View on Expo](https://expo.dev/accounts/[your-account]/projects/cherry-studio/builds/${{ steps.build_ios.outputs.build_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Release" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: \`${{ steps.version.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Published on GitHub" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: ${{ steps.create_release.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Installation" >> $GITHUB_STEP_SUMMARY
          echo "1. Download \`CherryStudio.ipa\` from the GitHub Release" >> $GITHUB_STEP_SUMMARY
          echo "2. Install on your jailbroken device using Filza, AltStore, or Sideloadly" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Note: Replace [your-account] with your Expo account name in the links above_" >> $GITHUB_STEP_SUMMARY

      # Step 14: Build Failure Summary
      - name: Build Failure Summary
        if: failure()
        run: |
          echo "## Build Failed ❌" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The iOS build process encountered an error. Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -n "${{ steps.build_ios.outputs.build_id }}" ]; then
            echo "### 🍎 iOS Build" >> $GITHUB_STEP_SUMMARY
            echo "- **Build ID**: \`${{ steps.build_ios.outputs.build_id }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **View Details**: [Expo Dashboard](https://expo.dev/accounts/[your-account]/projects/cherry-studio/builds/${{ steps.build_ios.outputs.build_id }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### 🔍 Troubleshooting" >> $GITHUB_STEP_SUMMARY
          echo "- Check the [EAS Build documentation](https://docs.expo.dev/build/introduction/)" >> $GITHUB_STEP_SUMMARY
          echo "- Review the build logs on Expo dashboard for detailed error messages" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure all credentials and secrets are properly configured" >> $GITHUB_STEP_SUMMARY
          echo "- If this is the first build, EAS will prompt to generate signing certificates" >> $GITHUB_STEP_SUMMARY
